<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Alberto Huélamo</title><link>https://alhuelamo.com/posts/</link><description>Recent content in Posts on Alberto Huélamo</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">CC BY-NC 4.0&lt;/a></copyright><lastBuildDate>Mon, 14 Feb 2022 16:30:00 +0100</lastBuildDate><atom:link href="https://alhuelamo.com/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Monadic Resource Management in Scala</title><link>https://alhuelamo.com/posts/2022/02/monadic-resource-management-in-scala/</link><pubDate>Mon, 14 Feb 2022 16:30:00 +0100</pubDate><guid>https://alhuelamo.com/posts/2022/02/monadic-resource-management-in-scala/</guid><description>Photo by Markus Spiske in Unsplash
In my company we have a considerably big Scala codebase. We use Scala for data pipelines, function apps, web services&amp;hellip; Everything is based on a common set of libraries that standardizes access to resources, enforces some conventions, and of course provides several utilities. One of this is a tiny little method which implements automatic context/resource management for AutoCloseable objects.
def withCloseable[C &amp;lt;: AutoCloseable, R](closeable: =&amp;gt; C)(f: C =&amp;gt; R): R = { // simplified implementation val result = f(closeable) closeable.</description><content type="html"><![CDATA[<figure><img src="/img/markus-spiske-C0koz3G1I4I-unsplash.jpg"
         alt="Photo by Markus Spiske in Unsplash"/><figcaption>
            <p>Photo by <a href="https://unsplash.com/@markusspiske">Markus Spiske</a> in <a href="https://unsplash.com/s/photos/pieces">Unsplash</a></p>
        </figcaption>
</figure>

<p>In my company we have a considerably big Scala codebase. We use Scala for data pipelines, function apps, web services&hellip; Everything is based on a common set of libraries that standardizes access to resources, enforces some conventions, and of course provides several utilities. One of this is a tiny little method which implements automatic context/resource management for <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/AutoCloseable.html"><code>AutoCloseable</code></a> objects.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">def</span> withCloseable<span style="color:#f92672">[</span><span style="color:#66d9ef">C</span> <span style="color:#66d9ef">&lt;:</span> <span style="color:#66d9ef">AutoCloseable</span>, <span style="color:#66d9ef">R</span><span style="color:#f92672">](</span>closeable<span style="color:#66d9ef">:</span> <span style="color:#f92672">=&gt;</span> C<span style="color:#f92672">)(</span>f<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">C</span> <span style="color:#f92672">=&gt;</span> R<span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">R</span> <span style="color:#f92672">=</span> <span style="color:#f92672">{</span>
  <span style="color:#75715e">// simplified implementation
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">val</span> result <span style="color:#66d9ef">=</span> f<span style="color:#f92672">(</span>closeable<span style="color:#f92672">)</span>
  closeable<span style="color:#f92672">.</span>close<span style="color:#f92672">()</span>
  result
<span style="color:#f92672">}</span>
</code></pre></div><p>In this post I will explain how I —as a learning exercise— (over)refactored the previous method to make it work with one of Scala&rsquo;s most powerful idioms. A word of warning, this post may be challenging for Scala newbies, but I will include links to the underlying concepts along the text.</p>
<p>Back to the method, it is quite similar to <a href="https://www.python.org/dev/peps/pep-0343/">Python&rsquo;s <code>with</code> statement</a>: it creates a safe zone in which you can be sure that the resource you&rsquo;re trying to use is going be closed or released whenever the code block finishes.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">withCloseable<span style="color:#f92672">(</span>openInputStream<span style="color:#f92672">())</span> <span style="color:#f92672">{</span> myInputStream <span style="color:#66d9ef">=&gt;</span>
  myInputStream<span style="color:#f92672">.</span>read<span style="color:#f92672">()</span>
<span style="color:#f92672">}</span>

<span style="color:#75715e">// Here `myInputStream` is *closed*
</span></code></pre></div><p>By using this method we can forget about closing the resource. It is quite ubiquitous in our codebase, and it&rsquo;s really handy and simple when it&rsquo;s used alone. But, when it comes to composing <code>AutoCloseable</code> resources things get a bit dirtier.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala">withCloseable<span style="color:#f92672">(</span><span style="color:#a6e22e">OauthClient</span><span style="color:#f92672">(</span>conf<span style="color:#f92672">))</span> <span style="color:#f92672">{</span> oauthClient <span style="color:#66d9ef">=&gt;</span>
  withCloseable<span style="color:#f92672">(</span><span style="color:#a6e22e">ServiceClient</span><span style="color:#f92672">(</span>conf<span style="color:#f92672">,</span> oauthClient<span style="color:#f92672">))</span> <span style="color:#f92672">{</span> serviceClient <span style="color:#66d9ef">=&gt;</span>
    withCloseable<span style="color:#f92672">(</span><span style="color:#a6e22e">LoggingClient</span><span style="color:#f92672">(</span>conf<span style="color:#f92672">))</span> <span style="color:#f92672">{</span> loggingClient <span style="color:#66d9ef">=&gt;</span>
      <span style="color:#75715e">// Here we have safe access to all three clients.
</span><span style="color:#75715e"></span>    <span style="color:#f92672">}</span>
  <span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>This works great too, but it is not quite good-looking, IMHO. It starts resembling <a href="http://callbackhell.com">old JavaScript</a>&hellip; I was thinking on how I could make it look better when I realized Scala has a really nice construction that seemed quite a nice fit for this: <strong>for-comprehensions</strong>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">for</span> <span style="color:#f92672">{</span>
  oauthClient   <span style="color:#66d9ef">&lt;-</span> withCloseable<span style="color:#f92672">(</span><span style="color:#a6e22e">OauthClient</span><span style="color:#f92672">(</span>conf<span style="color:#f92672">))</span>
  serviceClient <span style="color:#66d9ef">&lt;-</span> withCloseable<span style="color:#f92672">(</span><span style="color:#a6e22e">ServiceClient</span><span style="color:#f92672">(</span>conf<span style="color:#f92672">,</span> oauthClient<span style="color:#f92672">))</span>
  loggingClient <span style="color:#66d9ef">&lt;-</span> withCloseable<span style="color:#f92672">(</span><span style="color:#a6e22e">LoggingClient</span><span style="color:#f92672">(</span>conf<span style="color:#f92672">))</span>
<span style="color:#f92672">}</span> <span style="color:#66d9ef">yield</span> <span style="color:#f92672">{</span>
  <span style="color:#75715e">// Safe access to all three clients
</span><span style="color:#75715e"></span><span style="color:#f92672">}</span>
</code></pre></div><p>This looks more reasonable to my eyes. No more unnecessary indentations and it has a more clear and pleasant look. The problem is we need to do some tweaks before make this work. Also, let&rsquo;s try to make the new API compatible with the previous one.</p>
<h2 id="how-to-for-comprehend">How to for-comprehend</h2>
<p>Scala&rsquo;s for-comprehensions are a powerful syntax sugar to compose <a href="https://www.baeldung.com/scala/monads">Monads</a>. I&rsquo;m not going to waste keystrokes explaining <a href="https://stackoverflow.com/questions/44965/what-is-a-monad">what</a> <a href="https://stackoverflow.com/questions/2704652/monad-in-plain-english-for-the-oop-programmer-with-no-fp-background/2704795">Monads</a> <a href="https://www.youtube.com/watch?v=FZAmPhjV11A">are</a> <a href="https://towardsdatascience.com/monads-from-the-lens-of-imperative-programmer-af1ab8c8790c">in</a> <a href="https://medium.com/att-israel/its-time-you-learn-about-monads-4ebe687e3ec7">detail</a>, but for the purposes of this post, you just <em>basically</em> need to take into account that arrows <code>&lt;-</code> in a for-comprehension are nothing else than calls to the <code>flatMap</code> method of a given object, and that the <code>flatMap</code> method is the cornerstone of Monads.</p>
<p>In <em>regular</em> syntax the previous snipped would look like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#75715e">// Warning: this code does not compile yet!
</span><span style="color:#75715e"></span>
withCloseable<span style="color:#f92672">(</span><span style="color:#a6e22e">OauthClient</span><span style="color:#f92672">(</span>conf<span style="color:#f92672">)).</span>flatMap <span style="color:#f92672">{</span> oauthClient <span style="color:#66d9ef">=&gt;</span>
  withCloseable<span style="color:#f92672">(</span><span style="color:#a6e22e">ServiceClient</span><span style="color:#f92672">(</span>conf<span style="color:#f92672">,</span> oauthClient<span style="color:#f92672">)).</span>flatMap <span style="color:#f92672">{</span> serviceClient <span style="color:#66d9ef">=&gt;</span>
    withCloseable<span style="color:#f92672">(</span><span style="color:#a6e22e">LoggingClient</span><span style="color:#f92672">(</span>conf<span style="color:#f92672">)).</span>map <span style="color:#f92672">{</span> loggingClient <span style="color:#66d9ef">=&gt;</span>
      <span style="color:#75715e">// Safe access to all three clients
</span><span style="color:#75715e"></span>    <span style="color:#f92672">}</span>
  <span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>As you can see, by using the regular style we end up with code similar to the original. We can see calling <code>withCloseable()</code> should return some kind of <strong>underlying type</strong> which implements the <code>flatMap</code> method. The <code>map</code> method is also needed, but it can be implemented in terms of <code>flatMap</code>. Let&rsquo;s see how we can achieve this.</p>
<h2 id="introducing-openedresource">Introducing OpenedResource</h2>
<p>Let&rsquo;s analyze <code>withCloseable</code>&rsquo;s original signature:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">def</span> withCloseable<span style="color:#f92672">[</span><span style="color:#66d9ef">C</span> <span style="color:#66d9ef">&lt;:</span> <span style="color:#66d9ef">AutoCloseable</span>, <span style="color:#66d9ef">R</span><span style="color:#f92672">](</span>closeable<span style="color:#66d9ef">:</span> <span style="color:#f92672">=&gt;</span> C<span style="color:#f92672">)(</span>f<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">C</span> <span style="color:#f92672">=&gt;</span> R<span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">R</span>
</code></pre></div><p>It takes two argument lists. The first one receives the <code>AutoCloseable</code> instance <a href="https://docs.scala-lang.org/tour/by-name-parameters.html">lazily</a>. The second one is the actual <em>safe zone</em> where we have access to our <code>AutoCloseable</code> object, which can also be written as a code block (see previous code snippets). We&rsquo;ve seen though that the <code>flatMap</code> method should be available <em>right after</em> the first argument list. So calling <code>withCloseable</code> with only the first argument list should return our underlying data structure: <code>OpenedResource</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">def</span> withCloseable<span style="color:#f92672">[</span><span style="color:#66d9ef">C</span> <span style="color:#66d9ef">&lt;:</span> <span style="color:#66d9ef">AutoCloseable</span><span style="color:#f92672">](</span>closeable<span style="color:#66d9ef">:</span> <span style="color:#f92672">=&gt;</span> C<span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">OpenedResource</span><span style="color:#f92672">[</span><span style="color:#66d9ef">C</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span>
  <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">OpenedResource</span><span style="color:#f92672">(</span>closeable<span style="color:#f92672">)</span>

<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">OpenedResource</span><span style="color:#f92672">[</span><span style="color:#66d9ef">C</span> <span style="color:#66d9ef">&lt;:</span> <span style="color:#66d9ef">AutoCloseable</span><span style="color:#f92672">](</span>closeable<span style="color:#66d9ef">:</span> <span style="color:#f92672">=&gt;</span> C<span style="color:#f92672">)</span> 
</code></pre></div><p>What about <code>withCloseable</code>&rsquo;s second argument list? If we want to replicate it in <code>OpenedResource</code> we need its instances to be callable, i.e. we need the <a href="https://blog.matthewrathbone.com/2017/03/06/scala-object-apply-functions.html"><code>apply</code></a> method.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">OpenedResource</span><span style="color:#f92672">[</span><span style="color:#66d9ef">C</span> <span style="color:#66d9ef">&lt;:</span> <span style="color:#66d9ef">AutoCloseable</span><span style="color:#f92672">](</span>closeable<span style="color:#66d9ef">:</span> <span style="color:#f92672">=&gt;</span> C<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>

  <span style="color:#66d9ef">def</span> apply<span style="color:#f92672">[</span><span style="color:#66d9ef">R</span><span style="color:#f92672">](</span>f<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">C</span> <span style="color:#f92672">=&gt;</span> R<span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">R</span> <span style="color:#f92672">=</span> <span style="color:#f92672">{</span>
    <span style="color:#75715e">// simplified implementation
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">val</span> result <span style="color:#66d9ef">=</span> f<span style="color:#f92672">(</span>closeable<span style="color:#f92672">)</span>
    closeable<span style="color:#f92672">.</span>close<span style="color:#f92672">()</span>
    result
  <span style="color:#f92672">}</span>

<span style="color:#f92672">}</span>
</code></pre></div><p>Here we essentially moved the second argument list of the original <code>withCloseable</code> method into its own wrapper type. In other words, <code>OpenedResource</code> is the representation of the <em>safe zone</em> for a closeable instance.</p>
<h2 id="composing-openedresource">Composing OpenedResource</h2>
<p>As said, for-comprehensions are allowed in Scala for types that implement <code>flatMap</code> and <code>map</code> methods. They are both higher-order functions (HOF) that allow composition and transformations of the underlying values of the monad/wrapper object. And both they always have the very same signatures on every type they are implemented on.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">OpenedResource</span><span style="color:#f92672">[</span><span style="color:#66d9ef">C</span><span style="color:#f92672">](</span>closeable<span style="color:#66d9ef">:</span> <span style="color:#f92672">=&gt;</span> C<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>

  <span style="color:#66d9ef">def</span> apply<span style="color:#f92672">[</span><span style="color:#66d9ef">R</span><span style="color:#f92672">](</span>f<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">C</span> <span style="color:#f92672">=&gt;</span> R<span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">R</span> <span style="color:#f92672">=</span> <span style="color:#75715e">// omitted code
</span><span style="color:#75715e"></span>
  <span style="color:#66d9ef">def</span> flatMap<span style="color:#f92672">[</span><span style="color:#66d9ef">B</span> <span style="color:#66d9ef">&lt;:</span> <span style="color:#66d9ef">AutoCloseable</span><span style="color:#f92672">](</span>f<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">C</span> <span style="color:#f92672">=&gt;</span> <span style="color:#a6e22e">OpenedResource</span><span style="color:#f92672">[</span><span style="color:#66d9ef">B</span><span style="color:#f92672">])</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">OpenedResource</span><span style="color:#f92672">[</span><span style="color:#66d9ef">B</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#f92672">???</span>

  <span style="color:#66d9ef">def</span> map<span style="color:#f92672">[</span><span style="color:#66d9ef">B</span> <span style="color:#66d9ef">&lt;:</span> <span style="color:#66d9ef">AutoCloseable</span><span style="color:#f92672">](</span>f<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">C</span> <span style="color:#f92672">=&gt;</span> B<span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">OpenedResource</span><span style="color:#f92672">[</span><span style="color:#66d9ef">B</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#f92672">???</span>

<span style="color:#f92672">}</span>
</code></pre></div><p>In the context of <code>OpenedResource</code>, <code>flatMap</code> should provide <em>safe</em> access to the underlying <code>AutoCloseable</code> resource. Wait a second, this is precisely what the <code>apply</code> method does! We can use it to implement <code>flatMap</code>!</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">def</span> flatMap<span style="color:#f92672">[</span><span style="color:#66d9ef">B</span> <span style="color:#66d9ef">&lt;:</span> <span style="color:#66d9ef">AutoCloseable</span><span style="color:#f92672">](</span>f<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">C</span> <span style="color:#f92672">=&gt;</span> <span style="color:#a6e22e">OpenedResource</span><span style="color:#f92672">[</span><span style="color:#66d9ef">B</span><span style="color:#f92672">])</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">OpenedResource</span><span style="color:#f92672">[</span><span style="color:#66d9ef">B</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> 
  apply<span style="color:#f92672">(</span>f<span style="color:#f92672">)</span>
</code></pre></div><p>The only nuance here is that the <code>apply</code> call would is forced to return an <code>OpenedResource</code> instance, which is the return type of <code>f</code>, but that is exactly what we want. And now that we have <code>flatMap</code> we can use it to implement <code>map</code> by just making the compiler happy.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">def</span> map<span style="color:#f92672">[</span><span style="color:#66d9ef">B</span> <span style="color:#66d9ef">&lt;:</span> <span style="color:#66d9ef">AutoCloseable</span><span style="color:#f92672">](</span>f<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">C</span> <span style="color:#f92672">=&gt;</span> B<span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">OpenedResource</span><span style="color:#f92672">[</span><span style="color:#66d9ef">B</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span>
  flatMap<span style="color:#f92672">(</span>c <span style="color:#66d9ef">=&gt;</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">OpenedResource</span><span style="color:#f92672">(</span>f<span style="color:#f92672">(</span>c<span style="color:#f92672">)))</span>
</code></pre></div><h2 id="testing-time">Testing time!</h2>
<p>Let&rsquo;s write a unit test to verify it works.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#e6db74">&#34;withCloseable allow for-comprehensions&#34;</span> in <span style="color:#f92672">{</span>
  <span style="color:#66d9ef">val</span> closeRecords <span style="color:#66d9ef">=</span> mutable<span style="color:#f92672">.</span><span style="color:#a6e22e">MutableList</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Int</span><span style="color:#f92672">]()</span>

  <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">MyResource</span><span style="color:#f92672">(</span><span style="color:#66d9ef">val</span> n<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">AutoCloseable</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">override</span> <span style="color:#66d9ef">def</span> close<span style="color:#f92672">()</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Unit</span> <span style="color:#f92672">=</span> closeRecords <span style="color:#f92672">+=</span> n
  <span style="color:#f92672">}</span>

  <span style="color:#66d9ef">val</span> result<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">OpenedResource</span><span style="color:#f92672">[</span><span style="color:#66d9ef">MyResource</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#66d9ef">for</span> <span style="color:#f92672">{</span>
    i1 <span style="color:#66d9ef">&lt;-</span> withCloseable<span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> <span style="color:#a6e22e">MyResource</span><span style="color:#f92672">(</span><span style="color:#ae81ff">1</span><span style="color:#f92672">))</span>
    i2 <span style="color:#66d9ef">&lt;-</span> withCloseable<span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> <span style="color:#a6e22e">MyResource</span><span style="color:#f92672">(</span><span style="color:#ae81ff">2</span><span style="color:#f92672">))</span>
  <span style="color:#f92672">}</span> <span style="color:#66d9ef">yield</span> <span style="color:#f92672">{</span>
    <span style="color:#75715e">// safe zone with access to both closeable resources
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">MyResource</span><span style="color:#f92672">(</span>i1<span style="color:#f92672">.</span>n <span style="color:#f92672">+</span> i2<span style="color:#f92672">.</span>n<span style="color:#f92672">)</span>
  <span style="color:#f92672">}</span>

  closeRecords<span style="color:#f92672">.</span>toList should contain theSameElementsAs <span style="color:#a6e22e">List</span><span style="color:#f92672">(</span><span style="color:#ae81ff">2</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">)</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>This test is very simple: we define an <code>AutoCloseable</code> child class which appends a value in a list whenever its <code>close</code> method is called. The expected result is that the latest call to <code>withCloseable</code> will release the resource first, and thus that is why the expected list is in the reversed order of calls to <code>withCloseable</code>.</p>
<p>This test works! But notice there is a quite important nuance: the <code>result</code> type is <code>OpenedResource[MyResource]</code>! This is inconvenient:</p>
<ul>
<li><strong>Our</strong> <code>flatMap</code> method ensures <code>AutoCloseable</code> composition by enforcing its return type to be an extension of <code>AutoCloseable</code>. In other words, in the <code>yield</code> block we cannot return any other type than <code>AutoCloseable</code> instances.</li>
<li>We need a way to access or unwrap <code>OpenedResource</code>&rsquo;s underlying value.</li>
</ul>
<p>Let&rsquo;s focus on the first point. This code</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">val</span> result<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">OpenedResource</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Int</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#66d9ef">for</span> <span style="color:#f92672">{</span>
  i1 <span style="color:#66d9ef">&lt;-</span> withCloseable<span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> <span style="color:#a6e22e">MyResource</span><span style="color:#f92672">(</span><span style="color:#ae81ff">1</span><span style="color:#f92672">))</span>
  i2 <span style="color:#66d9ef">&lt;-</span> withCloseable<span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> <span style="color:#a6e22e">MyResource</span><span style="color:#f92672">(</span><span style="color:#ae81ff">2</span><span style="color:#f92672">))</span>
<span style="color:#f92672">}</span> <span style="color:#66d9ef">yield</span> <span style="color:#f92672">{</span>
  i1<span style="color:#f92672">.</span>n <span style="color:#f92672">+</span> i2<span style="color:#f92672">.</span>n
<span style="color:#f92672">}</span>
</code></pre></div><p>won&rsquo;t compile since <code>Int</code> —the value of the type we are returning in the <code>yield</code> section— does not extend <code>AutoCloseable</code>.</p>
<p>One option could be wrapping our types in a fake <code>AutoCloseable</code> class with a <code>fake</code> close method, but that would make the whole thing extremely inconvenient.</p>
<p>Could we perhaps just remove type bounds in <code>OpenedResource</code>&rsquo;s definition? That would make the test compile but the internals of <code>OpenedResource</code> won&rsquo;t, since the compiler is not aware that the value it&rsquo;s wrapping has a <code>close</code> method.</p>
<p>What if we had some way to tell the compiler to derive a type that provides the resource-releasing API —the <code>close</code> method— for <code>AutoCloseable</code> types and yet allow regular types to fit in so they can be the result of a for-comprehension?</p>
<h2 id="enter-type-classes">Enter type classes</h2>
<p>Well, it turns out we have a way. <a href="https://www.baeldung.com/scala/type-classes">Type classes</a> can isolate the resource-releasing logic from the types we pass to <code>OpenedResource</code> and thus make it generic for any type.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">trait</span> <span style="color:#a6e22e">Closer</span><span style="color:#f92672">[</span><span style="color:#66d9ef">C</span><span style="color:#f92672">]</span> <span style="color:#f92672">{</span>
  <span style="color:#66d9ef">def</span> close<span style="color:#f92672">(</span>closeable<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">C</span><span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Unit</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>First thing to define on a type class is the type class interface. Our use case is quite simple. We need an interface to <code>close</code> resources.</p>
<p>Let&rsquo;s refactor our <code>OpenedResource</code> class.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">OpenedResource</span><span style="color:#f92672">[</span><span style="color:#66d9ef">C</span><span style="color:#f92672">](</span>closeable<span style="color:#66d9ef">:</span> <span style="color:#f92672">=&gt;</span> C<span style="color:#f92672">)(</span><span style="color:#66d9ef">implicit</span> closer<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Closer</span><span style="color:#f92672">[</span><span style="color:#66d9ef">C</span><span style="color:#f92672">])</span> <span style="color:#f92672">{</span>

  <span style="color:#66d9ef">def</span> apply<span style="color:#f92672">[</span><span style="color:#66d9ef">R</span><span style="color:#f92672">](</span>f<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">C</span> <span style="color:#f92672">=&gt;</span> R<span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">R</span> <span style="color:#f92672">=</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">val</span> result <span style="color:#66d9ef">=</span> f<span style="color:#f92672">(</span>closeable<span style="color:#f92672">)</span>
    closer<span style="color:#f92672">.</span>close<span style="color:#f92672">(</span>closeable<span style="color:#f92672">)</span>
    result
  <span style="color:#f92672">}</span>

  <span style="color:#66d9ef">def</span> flatMap<span style="color:#f92672">[</span><span style="color:#66d9ef">B:</span> <span style="color:#66d9ef">Closer</span><span style="color:#f92672">](</span>f<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">C</span> <span style="color:#f92672">=&gt;</span> <span style="color:#a6e22e">OpenedResource</span><span style="color:#f92672">[</span><span style="color:#66d9ef">B</span><span style="color:#f92672">])</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">OpenedResource</span><span style="color:#f92672">[</span><span style="color:#66d9ef">B</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> apply<span style="color:#f92672">(</span>f<span style="color:#f92672">)</span>

  <span style="color:#66d9ef">def</span> map<span style="color:#f92672">[</span><span style="color:#66d9ef">B:</span> <span style="color:#66d9ef">Closer</span><span style="color:#f92672">](</span>f<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">C</span> <span style="color:#f92672">=&gt;</span> B<span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">OpenedResource</span><span style="color:#f92672">[</span><span style="color:#66d9ef">B</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> flatMap<span style="color:#f92672">(</span>c <span style="color:#66d9ef">=&gt;</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">OpenedResource</span><span style="color:#f92672">(</span>f<span style="color:#f92672">(</span>c<span style="color:#f92672">)))</span>

<span style="color:#f92672">}</span>
</code></pre></div><p>Instead of enforcing <code>C</code> to be <code>AutoCloseable</code>, we take that logic out to a <code>Closer[C]</code> instance, and then we use that instance to free the resource. We also use <a href="https://docs.scala-lang.org/scala3/book/ca-context-bounds.html">context bounds</a> in <code>flatMap</code> and <code>map</code> so that we make sure that the return type also has a <code>Closer</code> instance available.</p>
<p>But, where are those <code>Closer</code> (type class) instances? Well, we can provide them automagically using <code>implicits</code> or <code>given</code>/<code>using</code> in Scala 3.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">object</span> <span style="color:#a6e22e">Closer</span> <span style="color:#f92672">{</span>
  <span style="color:#66d9ef">implicit</span> <span style="color:#66d9ef">def</span> autoCloseableCloser<span style="color:#f92672">[</span><span style="color:#66d9ef">C</span> <span style="color:#66d9ef">&lt;:</span> <span style="color:#66d9ef">AutoCloseable</span><span style="color:#f92672">]</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Closer</span><span style="color:#f92672">[</span><span style="color:#66d9ef">C</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Closer</span><span style="color:#f92672">[</span><span style="color:#66d9ef">C</span><span style="color:#f92672">]</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">override</span> <span style="color:#66d9ef">def</span> close<span style="color:#f92672">(</span>closeable<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">C</span><span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Unit</span> <span style="color:#f92672">=</span> closeable<span style="color:#f92672">.</span>close<span style="color:#f92672">()</span>
  <span style="color:#f92672">}</span>

  <span style="color:#66d9ef">implicit</span> <span style="color:#66d9ef">def</span> nonAutoCloseable<span style="color:#f92672">[</span><span style="color:#66d9ef">T</span><span style="color:#f92672">]</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Closer</span><span style="color:#f92672">[</span><span style="color:#66d9ef">T</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Closer</span><span style="color:#f92672">[</span><span style="color:#66d9ef">T</span><span style="color:#f92672">]</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">override</span> <span style="color:#66d9ef">def</span> close<span style="color:#f92672">(</span>closeable<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">T</span><span style="color:#f92672">)</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Unit</span> <span style="color:#f92672">=</span> <span style="color:#f92672">()</span>
  <span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>Here we declare two <code>Closer</code> instances. One for <code>AutoCloseable</code> types and another generic one for the rest of types. If we create an <code>OpenedResource</code> instance with an <code>AutoCloseable</code> argument, the compiler will inject <code>autoCloseableCloser</code>, whereas it will inject <code>nonAutoCloseable</code> for any other type. This last one implements a fake <code>close</code> method by just returning <code>Unit</code>; but it works for any type and we do not need to write it anywhere else!</p>
<p>If we get back to our test, now we can do the following:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#e6db74">&#34;withCloseable allow for-comprehensions&#34;</span> in <span style="color:#f92672">{</span>
  <span style="color:#66d9ef">val</span> closeRecords <span style="color:#66d9ef">=</span> mutable<span style="color:#f92672">.</span><span style="color:#a6e22e">MutableList</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Int</span><span style="color:#f92672">]()</span>

  <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">MyAutoCloseable</span><span style="color:#f92672">(</span><span style="color:#66d9ef">val</span> n<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Int</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">AutoCloseable</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">override</span> <span style="color:#66d9ef">def</span> close<span style="color:#f92672">()</span><span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Unit</span> <span style="color:#f92672">=</span> closeRecords <span style="color:#f92672">+=</span> n
  <span style="color:#f92672">}</span>

  <span style="color:#66d9ef">val</span> result<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">OpenedResource</span><span style="color:#f92672">[</span><span style="color:#66d9ef">Int</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">=</span> <span style="color:#66d9ef">for</span> <span style="color:#f92672">{</span>
    i1 <span style="color:#66d9ef">&lt;-</span> withCloseable<span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> <span style="color:#a6e22e">MyAutoCloseable</span><span style="color:#f92672">(</span><span style="color:#ae81ff">1</span><span style="color:#f92672">))</span>
    i2 <span style="color:#66d9ef">&lt;-</span> withCloseable<span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> <span style="color:#a6e22e">MyAutoCloseable</span><span style="color:#f92672">(</span><span style="color:#ae81ff">2</span><span style="color:#f92672">))</span>
  <span style="color:#f92672">}</span> <span style="color:#66d9ef">yield</span> i1<span style="color:#f92672">.</span>n <span style="color:#f92672">+</span> i2<span style="color:#f92672">.</span>n

  closeRecords<span style="color:#f92672">.</span>toList should contain theSameElementsAs <span style="color:#a6e22e">List</span><span style="color:#f92672">(</span><span style="color:#ae81ff">2</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">)</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>And this code compiles! Whenever <code>withCloseable</code> creates <code>OpenedResource</code> instances the compiler will inject <code>autoCloseableCloser</code> because the argument we are passing to <code>withCloseable</code> is an <code>AutoCloseable</code> instance!</p>
<p>Also, notice we are now allowed to get an <code>OpenedResource[Int]</code> instance as the result of the for-comprehension.</p>
<h2 id="unwrapping-the-result">Unwrapping the result</h2>
<p>Well, there was a second nuance we did not addressed. How do we unwrap that <code>Int</code> in the test <code>result</code>? That&rsquo;s fairly trivial:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-scala" data-lang="scala"><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">OpenedResource</span><span style="color:#f92672">[</span><span style="color:#66d9ef">C</span><span style="color:#f92672">](</span>closeable<span style="color:#66d9ef">:</span> <span style="color:#f92672">=&gt;</span> C<span style="color:#f92672">)(</span><span style="color:#66d9ef">implicit</span> closer<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">Closer</span><span style="color:#f92672">[</span><span style="color:#66d9ef">C</span><span style="color:#f92672">])</span> <span style="color:#f92672">{</span>

  <span style="color:#75715e">// code omitted
</span><span style="color:#75715e"></span>
  <span style="color:#66d9ef">def</span> get<span style="color:#66d9ef">:</span> <span style="color:#66d9ef">C</span> <span style="color:#f92672">=</span> apply<span style="color:#f92672">(</span>identity<span style="color:#f92672">)</span>

<span style="color:#f92672">}</span>
</code></pre></div><p>Here we added the <code>get</code> method to obtain the wrapped value in <code>OpenedResource</code> and also make sure we release the resource in the case it&rsquo;s actually a releasable object. We just use the <code>identity</code> function on <code>apply</code> —remember, <code>apply</code> runs the function it receives and after that it <code>closes</code> the resource.</p>
<h2 id="proper-alternatives-to-resource-management">(Proper) alternatives to resource management</h2>
<p>This post was the story of how I over-engineered a solution for a first-world problem™ just for fun and for the sake of learning and understanding how to leverage Scala&rsquo;s idioms. The original API is more than fine: it just works and it&rsquo;s way simpler, and thus easier to maintain. That would be enough to discard my approach. Suffice to say, this did not make it into production :) Still, I enjoyed myself writing it, and it was a very nice learning exercise.</p>
<p>There are proper and nicer existing alternatives to resource management, like Scala 2.13&rsquo;s <a href="https://www.scala-lang.org/api/2.13.6/scala/util/Using$.html"><code>Using</code></a>, or Cats Effect&rsquo;s <a href="https://typelevel.org/cats-effect/docs/std/resource"><code>Resource</code></a>.</p>
<p>We engineers like to reinvent the wheel where most probably others made nicer wheels, but it is still a worthy exercise for ourselves, because we can learn a lot in the process.</p>
]]></content></item><item><title>Native Apple Silicon JDKs</title><link>https://alhuelamo.com/posts/2021/11/native-apple-silicon-jdks/</link><pubDate>Mon, 29 Nov 2021 12:45:14 +0100</pubDate><guid>https://alhuelamo.com/posts/2021/11/native-apple-silicon-jdks/</guid><description>Photo by Joey Banks in Unsplash
I bought an M1 Mac Mini, and I have been using it as my main personal desktop — games aside — for the last months. I&amp;rsquo;m extreamly pleased with this machine: it&amp;rsquo;s small, it feels fast and snappy, it&amp;rsquo;s quiet — I have never ever heard the fans — and its power consumption is very low.
Apple&amp;rsquo;s plan is to carry out a 2-year transition from November 2020 to replace its Intel-based Macs by M-something ones.</description><content type="html"><![CDATA[<figure><img src="/img/joey-banks-F0otTOnRYUU-unsplash.jpg"
         alt="Photo by Joey Banks in Unsplash"/><figcaption>
            <p>Photo by <a href="https://unsplash.com/@joeyabanks">Joey Banks</a> in <a href="https://unsplash.com/s/photos/m1-apple">Unsplash</a></p>
        </figcaption>
</figure>

<p>I bought an M1 Mac Mini, and I have been using it as my main personal desktop — games aside — for the last months. I&rsquo;m extreamly pleased with this machine: it&rsquo;s small, it feels fast and snappy, it&rsquo;s quiet — I have never ever heard the fans — and its power consumption <a href="https://support.apple.com/en-us/HT201897">is very low</a>.</p>
<p>Apple&rsquo;s plan is to carry out a 2-year transition from November 2020 to replace its Intel-based Macs by M-something ones. Changing base architectures is a challenging process, and one would expect it to be quite painful for users: early adopters should expect compatibility issues with applications, frameworks, or other kinds of software. However, Apple managed to smooth the process by introducing the Rosetta 2 compatibility layer. The &lsquo;2&rsquo; means that this is not a new concept: they already released the first version of Rosetta when they <a href="https://en.wikipedia.org/wiki/Mac_transition_to_Intel_processors">transitioned from PowerPC</a> back in 2005. Rosetta 2 reimplements the same concept for the ongoing transition, which is that Intel based applications may run seamlessly on Apple Silicon based Macs with no significant performance penalties. For my particular use case this has worked very well. I could ran eveything I needed, even if it was not released for M1 processors yet, with no major impact in performance, if any.</p>
<h1 id="jdks-and-rosetta-2">JDKs and Rosetta 2</h1>
<p>The JVM is no exception.</p>
<p>When I started using my brand new Mac Mini, one of the first things I installed was <a href="https://sdkman.io">SDKMAN</a>, a package manager I used for my basic JVM tooling. First things first, I installed Adopt OpenJDK 11 — since 11 is the version we use at work for most of our data pipelines — and boom, there was it: <code>java -version</code> worked, no questions asked, and it didn&rsquo;t feel slower than in my corporate Intel-powered Macbook Pro. So, I was happy.</p>
<p>Then some time passed, and after speaking with some collegues, I realized of one — not so obvious — thing: I was not using an Apple-Silicon-native JDK — I would argue this is another symptom of how well Rosetta 2 works, because I was actually fine with performance of my processes. You know, Java is not well know for its faster startup times, so the fact that SBT took 1 or 2 seconds to start up was not out of place. However, it could be better.</p>
<p>In SDKMAN you can run</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">sdk list java
</code></pre></div><p>which shows a table of the available JDK versions. Here is a portion of that table:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">================================================================================
Available Java Versions
================================================================================
 Vendor        | Use | Version      | Dist    | Status     | Identifier
--------------------------------------------------------------------------------
 AdoptOpenJDK  |     | 16.0.1.j9    | adpt    |            | 16.0.1.j9-adpt
               |     | 16.0.1.hs    | adpt    |            | 16.0.1.hs-adpt
               |     | 11.0.11.j9   | adpt    |            | 11.0.11.j9-adpt
               |     | 11.0.11.hs   | adpt    |            | 11.0.11.hs-adpt
               |     | 8.0.292.j9   | adpt    |            | 8.0.292.j9-adpt
               |     | 8.0.292.hs   | adpt    |            | 8.0.292.hs-adpt
 Corretto      |     | 17.0.1.12.1  | amzn    |            | 17.0.1.12.1-amzn
               |     | 17.0.0.35.2  | amzn    |            | 17.0.0.35.2-amzn
               |     | 16.0.2.7.1   | amzn    |            | 16.0.2.7.1-amzn
               |     | 11.0.13.8.1  | amzn    |            | 11.0.13.8.1-amzn
               |     | 11.0.12.7.2  | amzn    |            | 11.0.12.7.2-amzn
               |     | 8.312.07.1   | amzn    |            | 8.312.07.1-amzn
               |     | 8.302.08.1   | amzn    |            | 8.302.08.1-amzn
</code></pre></div><p>You can see there is nothing indicating whether each JDK is Intel or Apple Silicon native.</p>
<h2 id="filtering-m1-native-jdks">Filtering M1-native JDKs</h2>
<p>After doing some <del>thorough</del> <a href="https://github.com/sdkman/sdkman-cli/issues/830">research</a> I found out we can tell SDKMAN — version 5.10.0+ — to filter out non-native packages. In the file <code>~/.sdkman/etc/config</code> we can set the following setting:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">sdkman_rosetta2_compatible=false
</code></pre></div><p>Which by default is set to true. Then, we can open a new terminal to reload SDKMAN and run the same previous query:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">================================================================================
Available Java Versions
================================================================================
 Vendor        | Use | Version      | Dist    | Status     | Identifier
--------------------------------------------------------------------------------
 Corretto      |     | 17.0.1.12.1  | amzn    |            | 17.0.1.12.1-amzn
               |     | 17.0.0.35.2  | amzn    |            | 17.0.0.35.2-amzn
 Java.net      |     | 18.ea.25     | open    |            | 18.ea.25-open
               |     | 18.ea.24     | open    |            | 18.ea.24-open
               |     | 18.ea.6.lm   | open    |            | 18.ea.6.lm-open
               |     | 18.ea.5.lm   | open    |            | 18.ea.5.lm-open
               |     | 17           | open    |            | 17-open
               |     | 17.0.1       | open    |            | 17.0.1-open
 Liberica      |     | 17.0.1.fx    | librca  |            | 17.0.1.fx-librca
               |     | 17.0.1       | librca  |            | 17.0.1-librca
               |     | 17.0.0.fx    | librca  |            | 17.0.0.fx-librca
               |     | 17.0.0       | librca  |            | 17.0.0-librca
               |     | 16.0.2       | librca  |            | 16.0.2-librca
               |     | 11.0.13      | librca  |            | 11.0.13-librca
               |     | 11.0.12      | librca  |            | 11.0.12-librca
               |     | 8.0.312      | librca  |            | 8.0.312-librca
               |     | 8.0.302      | librca  |            | 8.0.302-librca
 Microsoft     |     | 17.0.1       | ms      |            | 17.0.1-ms
               |     | 17.0.0       | ms      |            | 17.0.0-ms
               |     | 16.0.2.7.1   | ms      |            | 16.0.2.7.1-ms
 Oracle        |     | 17.0.1       | oracle  |            | 17.0.1-oracle
               |     | 17.0.0       | oracle  |            | 17.0.0-oracle
 SapMachine    |     | 17           | sapmchn |            | 17-sapmchn
               |     | 17.0.1       | sapmchn |            | 17.0.1-sapmchn
 Temurin       |     | 17.0.1       | tem     |            | 17.0.1-tem
               |     | 17.0.0       | tem     |            | 17.0.0-tem
 Zulu          |     | 17.0.1       | zulu    |            | 17.0.1-zulu
               |     | 17.0.1.fx    | zulu    |            | 17.0.1.fx-zulu
               |     | 17.0.0       | zulu    |            | 17.0.0-zulu
               |     | 17.0.0.fx    | zulu    |            | 17.0.0.fx-zulu
               |     | 16.0.2       | zulu    |            | 16.0.2-zulu
               |     | 11.0.13      | zulu    |            | 11.0.13-zulu
               |     | 11.0.12      | zulu    |            | 11.0.12-zulu
               |     | 8.0.312      | zulu    |            | 8.0.312-zulu
               |     | 8.0.302      | zulu    |            | 8.0.302-zulu
================================================================================
</code></pre></div><p>We can see some differences, for instance, <code>AdoptOpenJDK</code> lines are gone.</p>
<h1 id="performance-boost">Performance boost</h1>
<p>I decided to give a try to Zulu JDK 11, and so I installed Zulu JDK 11. The first I did after was to start up sbt on my Scala playground project. SBT usually takes several seconds to boot up, but even with that I could notice it was substancially faster than with the non-native JDK.</p>
<p>I decided then to run a very simple experiment: I would run <code>sbt clean compile</code> for 10 times and then I would compute the average.</p>
<p>These were the results.</p>
<table>
<thead>
<tr>
<th>JDK</th>
<th>Version</th>
<th>Platform</th>
<th>Average time for 10 runs</th>
</tr>
</thead>
<tbody>
<tr>
<td>AdoptOpenJDK</td>
<td>11.0.11</td>
<td>x86-64</td>
<td>24.524 seconds</td>
</tr>
<tr>
<td>Temurin</td>
<td>17.0.1</td>
<td>Apple Silicon</td>
<td>11.804 seconds</td>
</tr>
<tr>
<td>Zulu</td>
<td>11.0.13</td>
<td>Apple Silicon</td>
<td>12.912 seconds</td>
</tr>
<tr>
<td>Liberica</td>
<td>11.0.13</td>
<td>Apple Silicon</td>
<td>14.170 seconds</td>
</tr>
</tbody>
</table>
<p>The results show how native JDKs can better leverage these new Apple ships. In this silly experiment, Zulu turned out to be twice as fast as the AdoptJDK running on Rosetta 2, while Temurin JDK 17, the new name for AdoptOpenJDK, which also features the <a href="https://www.optaplanner.org/blog/2021/09/15/HowMuchFasterIsJava17.html">latests performance upgrades</a>, is even faster. However, the gratest gains result from running the platform native JDKs.</p>
<h1 id="conclusion">Conclusion</h1>
<p>This Apple&rsquo;s hardware architecture transition is resulting so smooth it fooled me: Rosetta 2 did not make noticeable I wasn&rsquo;t using a non-native framework, but after discovering <em>the truth</em>, boy am I happy. SBT feels snappier, so as bloop and other tooling. We just need to choose the right version of our tools for the platform we work on.</p>
]]></content></item></channel></rss>